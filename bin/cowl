#!/usr/bin/env ruby

require 'rubygems'
require 'find'
require 'optparse'
require 'yaml'
require 'cowl'

CONFIGURATION_FILENAME = '.cowl.yml'

def main
  ignores = DEFAULT_IGNORES

  filenames = ['.']

  configuration_flags = {}

  option = OptionParser.new do |option|
    option.banner = "Usage: cowl [options] [<files>]"

    option.on('-i', '--ignore pattern', 'Ignore file names matching Ruby regex pattern') do |pattern|
      ignores << pattern
    end

    option.on('-w=', '--max-width', "Maximum column width, either an integer or \"unlimited\". Default: 80") do |max_width|
      configuration_flags["max_width"] = max_width
    end

    option.on('-h', '--help', 'Print usage info') do
      puts option
      exit
    end

    option.on('-v', '--version', 'Print version info') do
      puts "enlint #{Cowl::VERSION}"
      exit
    end
  end

  option.parse!

  filenames = ARGV unless ARGV.empty?

  recursive_filenames = []

  filenames.each do |f|
    if File.directory? f
      recursive_filenames = recursive_filenames.concat(recursive_list(f, ignores))
    else
      recursive_filenames << f
    end
  end

  configuration_dotfile = DEFAULT_CONFIGURATION

  recursive_filenames.each { |f|
    dir = File.expand_path("..", f)

    parent_of_home = File.expand_path("..", ENV["HOME"])

    while dir != parent_of_home
      config_file = dir + File::SEPARATOR + CONFIGURATION_FILENAME

      if File.exist?(config_file) then
        configuration_dotfile = YAML.load_file(config_file)
        break
      else
        dir = File.expand_path("..", dir)
      end
    end

    # Command line flags override dotfile settings
    configuration = configuration_dotfile.merge(configuration_flags)

    check(f, configuration)
  }
end

begin
  main
# User may quit before completion.
rescue Interrupt
  nil
# This program may be piped to another program (e.g. `less`),
# which is quit before this program completes.
rescue Errno::EPIPE, Errno::EMFILE
  nil
end
